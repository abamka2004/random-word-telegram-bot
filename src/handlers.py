from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram import Router, F
import logging

from src.extra.keyboards import subscribe_kb, unsubscribe_kb
from src.extra.utils import send_word, get_word_explanation
from src.database import db_requests as db

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    user_id: int = message.from_user.id

    await db.add_new_user(user_id)

    subscription_status = await db.get_subscription_status(user_id)

    await message.answer(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ üëª!</b>\n"
                         f"–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
                         f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {'–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ' if subscription_status is True else '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚ùå'}",
                         parse_mode="HTML", reply_markup=unsubscribe_kb)


@router.callback_query(F.data == "unsubscribe")
async def unsubscribe(callback: CallbackQuery):
    user_id: int = callback.from_user.id

    await db.unsubscribe(user_id)
    await callback.message.answer("<b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.</b>\n\n"
                                  "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üëá",
                                  parse_mode="HTML", reply_markup=subscribe_kb)
    await callback.answer()


@router.callback_query(F.data == "subscribe")
async def subscribe(callback: CallbackQuery):
    user_id: int = callback.from_user.id

    await db.subscribe(user_id)
    await callback.message.answer("<b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.</b>\n\n"
                                  "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üëá",
                                  parse_mode="HTML", reply_markup=unsubscribe_kb)
    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def payment(callback: CallbackQuery):
    payment_type = callback.data.split("_")[1]

    await callback.message.answer_invoice(
        title="–û–±—ä—è—Å–Ω–∏—Ç—å" if payment_type == 'explain' else "–ï—â—ë —Å–ª–æ–≤–æ",
        description=f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ {'–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞' if payment_type == 'explain' else '–µ—â—ë –æ–¥–Ω–æ —Å–ª–æ–≤–æ'}",
        payload=callback.data,
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=1)]
    )
    await callback.answer()


@router.pre_checkout_query()
async def pre_checkout_handler(event: PreCheckoutQuery):
    await event.answer(True)


@router.message(F.successful_payment.invoice_payload == "pay_word")
async def successful_pay_word(message: Message):
    try:
        await send_word(message.bot, message.from_user.id)
    except Exception as e:
        logging.error(f"Error sending the word after payment: {e}")
        await message.answer(
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é /refund"
        )


@router.message(F.successful_payment.invoice_payload.startswith("pay_explain_"))
async def successful_pay_explain(message: Message):
    info = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")

    try:
        word = message.successful_payment.invoice_payload.split("_")[2]

        explanation = await get_word_explanation(word)
        if explanation:
            await message.answer(
                f"üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ <b>{word}</b>:\n\n{explanation}",
                parse_mode="HTML"
            )
            await message.bot.delete_message(message.from_user.id, info.message_id)
        else:
            raise Exception

    except Exception as e:
        logging.error(f"Error sending the word explanation after payment: {e}")
        await message.answer(
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é /refund"
        )


@router.message(Command("refund"))
async def refund(message: Message):
    try:
        await message.bot.refund_star_payment(message.from_user.id, message.text.split()[1])
    except IndexError:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                             "/refund –≤–∞—à_id_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
